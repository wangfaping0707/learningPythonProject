"""
设置浮点数(或其他更具体的小数类型)的格式时，默认在小数点后面显示6位小数，并根据需要设置字段的宽度，而不进行任何形式的填充。
当然，这种默认的设置可能不是你想要的，在这种情况下，可根据需要在格式说明中指定宽度和精度，宽度是使用整数指定的，如下所示：
"""
from math import pi
number = "{num:10}".format(num=3)
print('number:', number)

name = "{name:10}".format(name='Bob')
print('name:', name)
# 如你所见，数和字符串的对齐方式不同，数字右对齐，字符串左对齐
# 如前所述：宽度是使用整数指定的，精度也是使用整数指定的，但需要在它前面加上一个表示小数点的句点

str = "Pi day is {pi:.3f}".format(pi = pi)
print('str:', str)

# 也可以同时指定宽度和精度


str1 = "Pi day is {pi:50.5f}".format(pi = pi)
print('str1:', str1)

# 最后，可使用逗号来指出你要添加千位分隔符
str2 = 'One googol is {:,}'.format(10**100)
print('str2:', str2)

print('----------------------------------------------------------')
"""
符号、对齐和用0填充：
正如你所看到的，字符串和数字的默认对齐方式不同。在一栏中同时包含字符串和数时，你可能想修改默认的对齐方式，
方式是：在指定的宽度和精度的数前面，可添加一个标志，这个标志可以是零、加号、减号或空格，其中零表示使用0来填充数字
"""
n = "{:010.2f}".format(pi)
print('n:', n)
n1 = "{:-10.2f}".format(pi)
print('n1:', n1)
print('------------------------------------------------')
# 要指定左对齐、右对齐和居中，可分别使用<、>和^
print("{0:<10.2f}\n{0:>10.2f}\n{0:^10.2f}".format(pi))
print('------------------------------------------------------')
print("{0:<010.2f}\n{0:>010.2f}\n{0:^010.2f}".format(pi))

# 可以使用填充字符来扩充说明符，这样将使用指定的字符而不是默认的空格来填充

string = "{:$^10}".format("what")
print('打印输出string：', string)
print('------------------------------------------------------')
print("{0:*<10.2f}\n{0:*>10.2f}\n{0:￥^10.2f}".format(pi))

# 还有更具体的说明符=,它指定将填充的字符放在符合和数字之间
print("{:10.4f}".format(pi))
print("{:=10.4f}".format(-pi))
print('-----------------------------------')

# 如果要给正数加上符号，可以使用符号 + （将其放在对齐说明符后面）
print("{:+<10.4f}".format(pi))




















































