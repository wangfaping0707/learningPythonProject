class People:
	hobby = '游泳'

	def __init__(self, name, age):
		self.name = name
		self.age = age

	def say(self):
		print(f'<{self.name}  :  {self.age}>')


p_obj = People('王晓涵', 18)

# 什么是反射：指的是在程序运行过程中可以 "动态" 获取对象的信息

# 实现反射机制的步骤：
# 1、先通过dir：可以查看出一个对象下可以.出哪些属性
print(f'p_obj可以使用.号访问的属性：{dir(p_obj)}')

'''
在python中一切皆对象：__dict__属性中保存了对象所有可写的属性及其对应值的字典
1、类的__dict__中包含了类变量，在类中定义的所有方法。而实例变量不包含在内；
2、对象的__dict__中包含了实例变量（即以self开头的变量）。不包含类变量
3、子类的__dict__中不包含父类__dict__的元素；
4、子类对象的__dict__也不包含父类对象的__dict__元素；
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
在python中__dict__与dir()都可以返回一个对象的属性，区别在于：
1、__dict__是对象的一个属性，而dir()是一个built-in的方法；
2、__dict__返回一个对象的属性名和值，即dict类型，而dir()返回一个属性名的list；
3、 __dict__不是每一个对象都有，而dir()对各种类型对象都起作用，如module, type, class, object；
4、 _dict__只返回对象的可写属性（writable attributes），而dir()返回各种相关（relavent）属性，且对于不同类型对象，作用不同。
=============================================================================================
__dict__与dir()的区别？
1、dir()是一个函数，返回的是list；
2、__dict__是一个字典，键为属性名，值为属性值；
3、dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；
4、对象的__dict__仅存储与该对象有关的属性，正是因为对象的__dict__属性，每个对象的属性才互不影响；
'''
print(p_obj.__dict__)

# 2、可以通过字符串反射到真正的属性上，得到属性值
print(p_obj.__dict__['name'])
